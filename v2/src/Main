/**********************
 Main Code
**********************/

function test() {
  debug(getUserDate());
}
  
function testEmail() {
  var message = GmailApp.getDraftMessages()[0];
 
  var body = message.getBody();
  
  debug(body);
  
  return;
  
  var from_arr = message.getFrom().split(' <');
  var name = from_arr[0];
  var from = from_arr[1].replace('>','');
  
  debug('Message subject:' + message.getSubject());
  debug('Message labels:');
  var labels = message.getThread().getLabels();
  
  for(var i=0; i<labels.length; i++)
    debug('  -' + labels[i].getName());
  
  GmailApp.sendEmail(message.getTo(), message.getSubject(), message.getBody(), {cc: message.getCc(), bcc: [message.getBcc(), from].join(','), htmlBody: message.getBody(), name: name, from: from, replyTo: message.getFrom()});
  
  message.moveToTrash();
}


// Function called on event timer
function main() {
  debug('Starting main()');
  
  // Print the prefs that we're running with.
  var prefs = getUserPrefs();
  prefs.printPrefs();
  
  // Try to create the labels that we need, if failure then return.
  if(!createLabels())
    return 'Error creating labels!';
  
  // Found the label, lets see if anything is in it
  var threads = getThreadsInLabel();
  
  if(threads.length > 0) {
    debug('Found ' + threads.length + ' threads to process');
    processThreads(threads);
  }
  else
    debug('No threads found to process.. exiting');
  
  sendLogs();
  
  return 'Finished!';
}

function ThreadMetaData()
{
  this.originalBody;      /* The original body of the message */
  this.newBody;           /* Body after we have removed date data */
  this.found_delim;       /* Boolean, if the message contains the delimeter (eg. we tried to parse the message) */
  this.successful_parse;  /* Boolean, if we were able to successfully parse the message */
  this.sendDate;          /* Date object when we should actually send this message */
  this.error_msg;         /* The error message (if !valid) why this thread is NOT valid */
}

/* Return a completed ThreadMetaData object for this message */
function parseMessage(message) {
  var prefs = getUserPrefs();
  var messageDate = executeCommand(function(){return message.getDate();});
  var metaData = new ThreadMetaData();
    
  var message_date_and_new_body_arr = getMessageDateAndNewBody(message);
  var date_line = message_date_and_new_body_arr[0];
  var message_new_body = message_date_and_new_body_arr[1];
  
  if(!date_line) {
    metaData.found_delim = false;
    metaData.successful_parse = false;
    metaData.error_msg = 'Could not find your special character: "' + prefs.getDelim() + '" in FIRST line of email body';
  }
  else {
    // We successfully found the delimeter
    metaData.found_delim = true;

    debug('Date String: ' + date_line + ' Relative to date message was composed: ' + messageDate);
    
    Date.setRelativeTo(messageDate);
    
    metaData.sendDate = parseDate(date_line);
 
    // We could not parse the data successfully
    if(metaData.sendDate == null) {
      debug('Error Parsing date string: ' + date_line);
      metaData.error_msg = 'Error parsing date string: ' + date_line;
      metaData.successful_parse = false;
    }
    else {
      // Success parsing
      debug('Date to send: ' + dateToStringWithoutTimezone(metaData.sendDate)); 
      metaData.originalBody = executeCommand(function(){return message.getBody();});;
      metaData.successful_parse = true;
      metaData.newBody = message_new_body;
      metaData.error_msg = null;
    }
  }
  return metaData;
}


function timeToSendMessage(messageSendDate) {
  var currentDate = getUserDate();
  
  // compare returns -1 if sendDate less than current date (eg. it has already passed)
  // compare returns 0 if the dates are equal
  //var timeToSend = Date.compare(messageSendDate, currentDate) < 1;
  var timeToSend = messageSendDate.getTime() <= currentDate.getTime();
  
  debug('Detected time to send message: ' + timeToSend + '. Send Date: ' + dateToStringWithoutTimezone(messageSendDate) + ' Current user date:' + dateToStringWithoutTimezone(currentDate));
   
  return timeToSend;
}


function handleMalformedMessage(message, metaObj) { 
  var process_message_as_error = false;
  var prefs = getUserPrefs();
      
  // If we are using a label then any malformed email is an error
  if(prefs.getRequireLabel()) {
    debug('Processing message as error because user requires a label');
    process_message_as_error = true;   
  }
  // If we don't have a label, then only if the delim was found is the message considered an error
  // (b/c a malformed date string)
  else if(metaObj.found_delim && !metaObj.successful_parse) {
    debug('Processing message as error because found delimeter in message, but could not parse it successfuly');
    process_message_as_error = true;    
  }

  if(process_message_as_error) {
    if(applyErrorLabel(message))
      parse_errors.push('Sorry! There was an error parsing your message with subject: "' + message.getSubject() + '". <br/> ' +
                      'The reason for this error was: "' + metaObj.error_msg + '". <br/>' +
                      'A new label was applied to this message:' + 
                      '<a href="https://mail.google.com/mail/?#label/' + prefs.getErrorLabelName() + '">' + prefs.getErrorLabelName() + '</a>. <br/>' +
                      'Gmail Delay Send will ignore this message until you fix the problem and remove that label. <br/>' +
                      'If you have any questions please see the page on <a href="http://code.google.com/p/gmail-delay-send/wiki/GmailDelaySendErrors">common problems</a>');
    
    else
      parse_errors.push('There was a problem with a message and we tried to apply the error label, but that was un-successful also. It is not a good day  :-(');
  }
}

function successfullyParsedAndSentMessage(message) {
  var successfullyParsedAndSent = false;
  
  var metaObj = parseMessage(message);
  
  if(!metaObj.found_delim || !metaObj.successful_parse) {
    debug('The message was malformed in some way. Found delimeter:' + metaObj.found_delim + '. Successful date parse: ' + metaObj.successful_parse);
    handleMalformedMessage(message, metaObj);
  }
  // If it is time to send the message, attempt to do so
  else if(timeToSendMessage(metaObj.sendDate) && sendMessage(message, metaObj))
    successfullyParsedAndSent = true;
  
  return successfullyParsedAndSent;
}

/* Check and send an individual thread if it's time */
function processThread(thread)
{
  var allMessagesSent = true;
  var prefs = getUserPrefs();
  var label = prefs.getToSendLabelName();
  var messages = executeCommand(function(){return thread.getMessages();});

  for(var i=0; i<messages.length; i++) {
    if(!successfullyParsedAndSentMessage(messages[i]))
      allMessagesSent = false;
  }
  
  if(prefs.getRequireLabel()) {
    debug('Because we are not using a label, skipping the removal process');
  }
  else if(allMessagesSent) {
    debug('All messages sent for this thread.. Removing label');
    var gmail_label_object = executeCommand(function(){return GmailApp.getUserLabelByName(label);})
    executeCommand(function(){thread.removeLabel(gmail_label_object)});
  }
}

function processThreads(threads)
{
  for(var i=0; i<threads.length; i++)
    processThread(threads[i]);
}